# PowerShell script to join a computer to a domain and verify the join
# Exits with 0 for success, 1 for failure

param (
    [Parameter(Mandatory=$true)]
    [string]$DomainName,
    [Parameter(Mandatory=$true)]
    [string]$Username,
    [Parameter(Mandatory=$true)]
    [string]$Password
)

# Function to log messages
function Write-Log {
    param ([string]$Message)
    Write-Output "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
}

try {
    Write-Log "Starting domain join process for domain: $DomainName"

    # Convert password to secure string
    $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
    $Credential = New-Object System.Management.Automation.PSCredential ($Username, $SecurePassword)

    # Attempt to join the domain
    Write-Log "Attempting to join the domain..."
    Add-Computer -DomainName $DomainName -Credential $Credential -Force -ErrorAction Stop

    # Verify domain join
    Write-Log "Verifying domain join..."
    $ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem
    if ($ComputerSystem.PartOfDomain -and $ComputerSystem.Domain -eq $DomainName) {
        Write-Log "Successfully joined domain: $DomainName"
        exit 0
    } else {
        Write-Log "Failed to verify domain join. Computer is not part of the expected domain."
        exit 1
    }
}
catch {
    Write-Log "Error occurred: $($_.Exception.Message)"
    exit 1
}

-------------------------------------------------------------------------------------------------------------------------------


# PowerShell script to move a computer to a specified OU and verify the move
# Exits with 0 for success, 1 for failure

param (
    [Parameter(Mandatory=$true)]
    [string]$DomainName,
    [Parameter(Mandatory=$true)]
    [string]$TargetOU,
    [Parameter(Mandatory=$true)]
    [string]$Username,
    [Parameter(Mandatory=$true)]
    [string]$Password
)

# Function to log messages
function Write-Log {
    param ([string]$Message)
    Write-Output "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
}

try {
    Write-Log "Starting OU move process for computer to OU: $TargetOU in domain: $DomainName"

    # Convert password to secure string
    $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
    $Credential = New-Object System.Management.Automation.PSCredential ($Username, $SecurePassword)

    # Get the computer name
    $ComputerName = $env:COMPUTERNAME

    # Attempt to move the computer to the target OU
    Write-Log "Attempting to move computer $ComputerName to OU..."
    $Computer = Get-ADComputer -Identity $ComputerName -Credential $Credential -ErrorAction Stop
    Move-ADObject -Identity $Computer.DistinguishedName -TargetPath $TargetOU -Credential $Credential -ErrorAction Stop

    # Verify the OU move
    Write-Log "Verifying OU move..."
    $UpdatedComputer = Get-ADComputer -Identity $ComputerName -Credential $Credential -ErrorAction Stop
    if ($UpdatedComputer.DistinguishedName -like "*$TargetOU") {
        Write-Log "Successfully moved computer $ComputerName to OU: $TargetOU"
        exit 0
    } else {
        Write-Log "Failed to verify OU move. Computer is not in the expected OU."
        exit 1
    }
}
catch {
    Write-Log "Error occurred: $($_.Exception.Message)"
    exit 1
}


----------------------------------------------------------------------------------------------------------------------------

name: Orchestrate Sub-Actions
on:
  push:
    branches:
      - master
    paths:
      - 'Pending/*.tfvars' # Trigger on changes to .tfvars files in Pending

jobs:
  extract_server_name:
    runs-on: ubuntu-latest
    outputs:
      server_name: ${{ steps.extract.outputs.server_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Extract Server Name from tfvars File
        id: extract
        run: |
          # Get the file name from the changed files in Pending
          FILE=$(git diff --name-only HEAD^ HEAD | grep 'Pending/.*\.tfvars' | head -n 1)
          if [ -z "$FILE" ]; then
            echo "No .tfvars file found in Pending"
            exit 1
          fi
          # Extract server name from file name (e.g., myserver.tfvars -> myserver)
          SERVER_NAME=$(basename "$FILE" .tfvars)
          echo "server_name=$SERVER_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  join_domain:
    runs-on: ubuntu-latest
    needs: extract_server_name
    steps:
      - name: Trigger Join Domain Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'join-domain.yml',
              ref: 'master',
              inputs: {
                server_name: '${{ needs.extract_server_name.outputs.server_name }}'
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Join Domain Completion
        uses: fountainhead/action-wait-for-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.sha }}
          checkName: 'join-domain'
          timeoutSeconds: 600
          intervalSeconds: 30

  move_ou:
    runs-on: ubuntu-latest
    needs: [extract_server_name, join_domain]
    if: needs.join_domain.result == 'success'
    steps:
      - name: Trigger Move OU Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'move-ou.yml',
              ref: 'master',
              inputs: {
                server_name: '${{ needs.extract_server_name.outputs.server_name }}'
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Move OU Completion
        uses: fountainhead/action-wait-for-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.sha }}
          checkName: 'move-ou'
          timeoutSeconds: 600
          intervalSeconds: 30

  install_software:
    runs-on: ubuntu-latest
    needs: [extract_server_name, move_ou]
    if: needs.move_ou.result == 'success'
    steps:
      - name: Trigger Install Software Workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'install-software.yml',
              ref: 'master',
              inputs: {
                server_name: '${{ needs.extract_server_name.outputs.server_name }}'
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Install Software Completion
        uses: fountainhead/action-wait-for-check@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.sha }}
          checkName: 'install-software'
          timeoutSeconds: 600
          intervalSeconds: 30

  final_step:
    runs-on: ubuntu-latest
    needs: [extract_server_name, join_domain, move_ou, install_software]
    if: always()
    steps:
      - name: Summarize Results
        run: |
          echo "Server Name: ${{ needs.extract_server_name.outputs.server_name }}"
          echo "Join Domain Status: ${{ needs.join_domain.result }}"
          echo "Move OU Status: ${{ needs.move_ou.result || 'skipped' }}"
          echo "Install Software Status: ${{ needs.install_software.result || 'skipped' }}"

-------------------------------------------------------------------------------------------------------------------------------------

name: Join Domain

on:
  push:
    branches:
      - main

jobs:
  join-domain:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Domain Join Script
        shell: pwsh
        run: |
          .\Join-Domain.ps1 `
            -DomainName "${{ secrets.DOMAIN_NAME }}" `
            -Username "${{ secrets.DOMAIN_USERNAME }}" `
            -Password "${{ secrets.DOMAIN_PASSWORD }}"
        env:
          # Optional: Override log file path if needed
          LOG_FILE_PATH: "${{ runner.temp }}\DomainJoin.log"

      - name: Upload Log File
        if: always() # Runs even if the previous step fails
        uses: actions/upload-artifact@v3
        with:
          name: domain-join-log
          path: ${{ runner.temp }}\DomainJoin_*.log
