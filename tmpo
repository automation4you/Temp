# Login to Azure
Connect-AzAccount

# Import the CSV file that contains VM names, subscription, tag category, and tag value
$csvFilePath = "C:\path\to\vm_tags.csv"
$vmTags = Import-Csv -Path $csvFilePath

# Validate CSV file structure
if (-not ($vmTags -and $vmTags[0].PSObject.Properties.Name -contains "Computer Name" -and
         $vmTags[0].PSObject.Properties.Name -contains "Subscription" -and 
         $vmTags[0].PSObject.Properties.Name -contains "Backup Tag Name" -and 
         $vmTags[0].PSObject.Properties.Name -contains "Backup Tag Value")) {
    Write-Error "CSV file is missing required columns: Computer Name, Subscription, Backup Tag Name, or Backup Tag Value."
    return
}

# Initialize success and failure tracking
$successList = @()
$failureList = @()

# Loop through each entry in the CSV file
foreach ($entry in $vmTags) {
    $vmName = $entry.'Computer Name'        # VM Name from CSV
    $subscriptionId = $entry.Subscription    # Subscription ID
    $category = $entry.'Backup Tag Name'    # Tag Key
    $value = $entry.'Backup Tag Value'      # Tag Value

    try {
        # Validate if the subscription exists
        $subscription = Get-AzSubscription -SubscriptionId $subscriptionId -ErrorAction SilentlyContinue
        if ($null -eq $subscription) {
            Write-Warning "Subscription '$subscriptionId' does not exist or is not accessible. Skipping VM '$vmName'."
            $failureList += $vmName
            continue
        }

        # Set the context to the valid subscription
        Set-AzContext -SubscriptionId $subscriptionId | Out-Null

        # Get the VM by name in the specified subscription
        $vm = Get-AzVM -Name $vmName -ErrorAction SilentlyContinue

        if ($null -eq $vm) {
            Write-Warning "VM '$vmName' not found in subscription '$subscriptionId'. Skipping."
            $failureList += $vmName
            continue
        }

        # Ensure tags exist before accessing them
        if ($null -eq $vm.Tags) { $vm.Tags = @{} }

        # Check if the tag already has the correct value
        if ($vm.Tags[$category] -eq $value) {
            Write-Host "Tag '$category' already has the correct value ('$value') for VM '$vmName'. Skipping update." -ForegroundColor Cyan
            $successList += $vmName
            continue
        }

        # Prepare the new tag (add or update)
        $tag = @{ $category = $value }

        # Update the tag using Update-AzTag (Merge operation retains other tags)
        Update-AzTag -ResourceId $vm.Id -Tag $tag -Operation Merge -WhatIf
        Write-Host "Added/Updated tag '$category=$value' for VM '$vmName' in subscription '$subscriptionId'" -ForegroundColor Green
        $successList += $vmName
    } catch {
        Write-Error "Failed to update tags for VM '$vmName' in subscription '$subscriptionId': $($_.Exception.Message)"
        $failureList += $vmName
    }
}

# Summary
Write-Host "`nSummary:" -ForegroundColor Cyan
Write-Host "Successfully updated VMs:" -ForegroundColor Green
$successList | ForEach-Object { Write-Host $_ }

Write-Host "Failed to update VMs:" -ForegroundColor Red
$failureList | ForEach-Object { Write-Warning $_ }
